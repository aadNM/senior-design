import logging
import os
from typing import Text

import pkg_resources
from alembic import command
from alembic.config import Config
from sqlalchemy.orm import Session

import rasax.community.config as rasa_x_config
from rasax.community.database.admin import Project
from rasax.community.services.domain_service import DomainService
from rasax.community.services.role_service import RoleService
from rasax.community.services.settings_service import SettingsService
from rasax.community.services.config_service import ConfigService
from rasax.community.services.user_service import UserService, UserException

logger = logging.getLogger(__name__)

ALEMBIC_PACKAGE = pkg_resources.resource_filename(
    __name__, "database/schema_migrations"
)


def run_migrations(session: Session) -> None:
    """Run all schema migrations and initialize the database.

    NOTE: The `database.utils.wait_for_migrations` function should be kept in
    sync with what this function does, in order for it to correctly wait until
    the database is ready to be used.

    Args:
        session: SQLAlchemy session.
    """
    _run_schema_migrations(session)

    _create_initial_project(session)
    _create_default_roles(session)
    _create_default_permissions(session)
    _create_system_user(session)
    _generate_chat_token(session)
    _init_config_service(session)


def _run_schema_migrations(session: Session) -> None:
    logger.info("Start running database migrations.")

    # Configure alembic paths and database connection
    alembic_config = _get_alembic_config(session)

    # Run migrations
    _run_alembic_migration(alembic_config)

    logger.info("Database migrations finished.")


def _get_alembic_config(session: Session) -> Config:
    alembic_config_file = os.path.join(ALEMBIC_PACKAGE, "alembic.ini")
    alembic_config = Config(alembic_config_file)
    alembic_config.set_main_option(
        "script_location", os.path.join(ALEMBIC_PACKAGE, "alembic")
    )

    connection_url = str(session.bind.url)
    # To avoid interpolation of `%` we have to escape them by duplicating them
    connection_url = connection_url.replace("%", "%%")
    alembic_config.set_main_option("sqlalchemy.url", connection_url)
    alembic_config.engine = session.bind

    return alembic_config


def _run_alembic_migration(
    alembic_config: Config, target_revision: Text = "head"
) -> None:
    command.upgrade(alembic_config, target_revision)


def _create_initial_project(session) -> None:
    if not session.query(Project).first():
        settings_service = SettingsService(session)
        settings_service.init_project(
            rasa_x_config.team_name, rasa_x_config.project_name
        )

        session.commit()
        logger.debug(
            f"No projects present. Created initial default project '{rasa_x_config.project_name}'."
        )


def _create_default_roles(session) -> None:
    role_service = RoleService(session)
    role_service.init_roles(project_id=rasa_x_config.project_name)
    session.commit()


def _create_default_permissions(session) -> None:
    role_service = RoleService(session)

    default_roles = role_service.default_roles.items()
    for role, permissions in default_roles:
        if not role_service.get_role_permissions(role):
            role_service.save_permissions_for_role(role, permissions)
            logger.debug(f"Created default permissions for '{role}' role.")
    session.commit()


def _generate_chat_token(session) -> None:
    domain_service = DomainService(session)
    existing_token = domain_service.get_token()
    if not existing_token:
        generated_token = domain_service.generate_and_save_token()
        logger.debug(
            "Generated chat token '{}' with expiry date {}"
            "".format(generated_token.token, generated_token.expires)
        )


def _create_system_user(session: Session) -> None:
    user_service = UserService(session)
    try:
        user = user_service.create_system_user()
        username = user.get("username")
        logger.debug(f"Created new system user '{username}'.")
    except UserException as u:
        logger.debug(f"Found existing system system user '{u}'.")


def _init_config_service(session: Session) -> None:
    # Initialize database with default configuration values so that they can be
    # read later.
    config_service = ConfigService(session)
    config_service.initialize_configuration()


def get_migration_progress(session: Session) -> float:
    """Get the database migrations progress as a percentage.

    Args:
        session: Database session.

    Returns:
        Migration progress as a percentage.
    """
    from alembic.script import ScriptDirectory
    from rasax.community.database.schema_migrations.alembic import ALEMBIC_DIR
    from rasax.community.database import utils as db_utils

    script_dir = ScriptDirectory(ALEMBIC_DIR)
    revisions = [script.revision for script in script_dir.walk_revisions()]
    revisions.reverse()

    db_heads = db_utils.get_database_revision_heads(session)

    if not db_heads:
        return 0.0

    current_position = revisions.index(db_heads[0]) + 1
    total = len(revisions)

    percent = (current_position * 100) / total

    return round(percent, 2)
